public void setExam(Exam exam) {
 this.exam =exam;
}

<bean id="exam" class="entity.NewlecExam"/>
<bean id="console" class="ui.inlineExamConsole">
  <property name="exam" ref="exam"/>
</bean>

소스코드와 XML설정을 통하여 DI 한 것임.



Spring이 가지고 있는 Ioc 컨테이너는 객체를 생성하고 조립해주는 객체를 담는 그릇 역할을한다.

Spring이 위의 bean 데이터를 읽게되면 Ioc 컨테이너에 exam, console 객체를 만들고, 프로퍼티 exam에 의해서
setter함수에다가 인젝션 하는 작업이 이루어진다.

console:inlineExamConsole => exam : Exam

객체들이 생성되고, console객체가 exam객체를 참조하고 있는 모습이 만들어진다.

@autowired를 사용시 문제가 되는 것은 Bean 객체에서 어떤 것을 근거로 setting이 되는 것인지 확고하지 않다.
=> 기본적으로는 자료형을 기준으로 한다. // 소스코드의 setExam(Exam exam)에서 "Exam" 이다.
=> 자바 코드의 setter과 Bean의 class가 달라도 되는 경우는 setter의 자료형이 상위 인터페이스일 경우이다.  
=> 컨테이너에서는 자바 코드의 자료형과 부합되는 class를 자동으로 찾아 바인딩 시켜준다.

그렇다면? <bean> 에서 같은 객체가 2개이면 어떻게 될까?
=> 사용할 수 있는 것은 1개인데 객체가 2개라 연결이 안됨. (오류 발생)

그렇다면? 하나는 id를 지정해주면 어떻게 될까?
=> 바인딩이 됨. 자바 코드의 객체의 참조변수와 일치하는 id를 찾아 바인딩 됨.

그렇다면? 각각 다른 id를 지정해주면?>
=> 바인딩이 안됨.
=> 이럴때 @Qualifier를 사용하여 설정의 id를 인식하게 해준다.
