Configuration이라는 설정을 Xml을 이용하여 여러 태그들로 해왔다.

이제는 Annotation을 사용하면서 Xml의 태그를 하나씩 지워나가고 있다.

Spring을 사용할 때는 설정을 Xml로 할 것인지 Annotation으로 할 것인지 정해서 해야한다.
섞어서 하는 방법은 좋은 방법은 아닌 것 같다.


<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" ...>
  <context:component-scan base-package="spring.di.ui/>
  <bean id="exam" class="spring.di.entity.NewlecExam"/>

</beans>
XML의 지시서인데, 이제 Annotation으로만 설정하려면 지시서의 작성방식을 변경해야한다.
지시서 작성방식의 변경이 필요하다.

위의 XML 파일을 자바 클래스로 만들어주면된다.
이 때 자바 클래스는 일반적인 클래스가 아니고 설정을 위한 클래스이므로 @Configuration임을 알려준다.
@Configuration을 설정하였다면, XML에서 설정한 내용들을 Annotation으로 추가할 수 있게 된다.
<context:component-scan>은 @ComponentScan("패키지명")으로 사용하면 되겠다.
패키지가 두 개 이상일 경우, 자바 문법을 따라 {"spring.di.ui","spring.di.entity"}로 사용한다.

XML 파일에서 Bean 태그를 자바로 표현할 경우 @Bean으로 사용하면 된다.
이 때 XML 파일에서는 Spring이 객체를 만들어 줬는데 @Bean은 결국 내가 객체를 만들어야하는 꼴이된다.
=> 지시서 같은 느낌이 들지 않는다. @Bean 태그가 IoC 컨테이너에 담아주는 것이다.


@ComponentScan("spring.di.ui")
@Configuration
Public class NewlecAppConfig {
	@Bean
	public Exam exam() { => exam이 IoC 컨테이너에서 이름으로 사용됨.
		return new NewlecExam(); => 즉, new 객체가 exam이라는 이름으로 컨테이너에서 사용되는 것.
	}
}

실행 프로그램 파일에서 context를 annotation 관련된 것으로 설정해주면 됨.
ApplicationContext context = 
new AnnotationConfigApplicationContext(NewlecDIConfig.class);