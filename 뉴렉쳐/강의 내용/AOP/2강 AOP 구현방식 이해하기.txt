public class NewlecExam implements Exam {


보조업무로직 	
=======================================
	public int total() { => 주업무로직



	int result = kor + eng + math +com;



	return result;
=======================================

보조업무로직 


}


}

로직을 구현할때 사용자의 요구사항과 로직을 구현했음.

새로운 관점으로 권한을 주기위해 코드를 삽입하거나, 함수에 대한 시간타임을 측정하는 코드를 

주업무로직 위 아래로 넣게됨. => 필요시 쓰고 필요하지 않으면 주석처리했음.

이렇게 작성하다보니 현실적으로 불가능한 경우도 생겼음.
=> ex) 업무로직의 소스코드를 가지고 있지 않은 경우. 보조업무로직 코드를 삽입을 하지 못함

AOP는 가능하게 해줌.

AOP 구현 방법은
주업무로직(Core Concern)과 따로 보조업무로직(Cross-cutting Concern)을 만든다.

Cross-cutting Concern을 Core Concern에 꽂아 넣을 수 있는 방법을 찾는다.
=> 그렇게 사용되는 방법이 proxy임.

proxy는 실제 주업무를 가지고 있는 코드를 호출하는 역할을함.

사용자는 proxy를 호출하고 proxy를 호출하는 점에서
앞 뒤로, Cross-cutting Concern을 호출하게 될 것이다.
=> 내가 만드는 것.
이후 Core Concern을 호출하게 된다.

Spring과 상관없지만, 이 기능에 Spring을 얹게 된다면?
=> 코드 변경과 수정의 문제에 대해 Spring Di로 해결.

