AOP는 Spring이 아니고 방법론이다.
APO를 구현할 때 Spring이 도움을 준다.

Spring이 지원하는 범주내에서 AOP로 프로그램을 만들면 어떤 도움을 받을 수 있는지 확인해 볼 것이다.

Spring과 상관없이 AOP는 방법론!

AOP는 Asepect Oriented Programming 이다.

보통은 사용자가 바라보는 것을 기준으로 주업무로직(객체지향)이 만들어진다.
그런 로직을 위해서 다른 로직들이 주변에 필요하게 될 때가 있다.
=> 개발자가 관점, 운영자 관점으로 보조업무로직(관점지향).

관점지향프로그래밍은 객체지향프로그래밍보다 큰 개념이다.


Primary(Core) Concern에서 관점에 해당되는 것 중에서 주관심사들은 객체로 만들어진다.
실제적인 업무들은 메서드로 만들어진다. 객체들은 서로간에 이용관계에 있게 된다.
=> 여기서는 사용자의 관점(OOP)로 프로그래밍이 된다.

하지만 필요에 따라서 보조업무로직이 필요하다.(로그처리, 보안처리, 트랜잭션처리 등)
=> 개발자, 운영자 등에게 필요한 것.

보조업무로직들은 실질적인 업무를 담당하는 코드의 위 아래에 위치하게 될 것이다.

1====== 보조업무로직
2ㅁㅁㅁ 주업무로직   
3====== 보조업무로직

4====== 보조업무로직
5ㅁㅁㅁ 주업무로직   
6ㅁㅁㅁ 주업무로직  
7ㅁㅁㅁ 주업무로직  
8====== 보조업무로직

위의 그림에서 프로그램은 1 => 8 방향으로 진행되는데, 이 때 보조업무로직은
진행방향을 가로지르는 형태로 있어서 cross-cutting Concern(공통관심사항) 이라고 한다.

cross-cutting Concern

AOP방법론은 관점로직들을 주업무로직에 꽂았다 뺐다 할 수있다.