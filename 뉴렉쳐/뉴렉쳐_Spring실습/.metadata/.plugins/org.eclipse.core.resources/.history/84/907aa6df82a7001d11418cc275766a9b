package spring.di;

import java.util.ArrayList;
import java.util.List;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import spring.di.entity.Exam;
import spring.di.entity.NewlecExam;
import spring.di.ui.ExamConsole;
import spring.di.ui.GridExamConsole;

public class Program {

	public static void main(String[] args) {
		
			//Exam exam = new NewlecExam();
			/*
			 * exam 이라는 객체를 주입하면서 결과가 달라지고 있음.
			 */
			//ExamConsole console = new InlineExamConsole(exam); // DI
			//ExamConsole console = new GridExamConsole(exam);
			// 현재는 코드를 작성했지만, 코드를 작성안하고 외부에서 해주는 작업은
			// Spring에서 가능하다.

		/* 결론 : 스프링에게 지시하는 방법으로 코드를 변경한다.
		Exam exam = new NewlecExam();
		ExamConsole console = new GridExamConsole(); // 기본 생성자로 의존성 주입 하기 위한 코드
		
		console.setExam(exam);
		==========================================
		원인 : exam 이나 console 객체가 바뀌게 되면, 결합관계도 바뀌어야한다.
		이 주석 안에 있는 코드들은 바뀌어야함.
		
		우리에게는 아래에 살아있는 console.print()를 실행시키기 위한 console 객체가 필요하다.
		ExamConsole console = ? 이 console 객체를 누군가가 (다른 곳에서) 설정해줘야함.
		=> 즉, 위의 코드들을 설정으로 뺀 후, 객체화 해서 전달해주는 누군가가 있어야한다.
		=> 그게 Spring의 역할이다.
		=> Spring의 기능을 이용해서 위 코드의 관계를 분리한다! 라고 이해하면됨.
		*/

		/*
		 * 지시서대로 꺼내는 작업.
		 */
		// ApplicationContext는 인터페이스 이다.
		// 메이븐을 추가해야 임포트 된다.
		ApplicationContext context = 
				new ClassPathXmlApplicationContext("spring/di/setting.xml");
		/* context가 (정확히 말하자면 classPathXml 객체)가 지시서를 잘 읽었다면, 지시서대로 객체를 만들고,
		인젝션까지 해서 컨테이너에 잘 보관중.
		컨테이너에 있는 객체를 사용하는 것은 id를 가지고 사용할 수 있고, class로 사용할 수 있음.
		*/
		
		//ExamConsole console = (ExamConsole) context.getBean("console");
		// context에게 Bean을 달라고한다. console이라는 name을 가지고 있는 객체를.
		// name에 해당되는 것은 어떠한 객체인지 모르기 떄문에, 형변환을 해줘서 꺼내야함.
		
		
		// 자료형으로 바로 꺼낼 수도 있다. ExamConsol 타입에 참조될 수 있는 것을 얻어준다.
		ExamConsole console = context.getBean(ExamConsole.class);
		// 형싱 변환 필요없으며 선호되는 방식이며, 클래스명을 깔끔하게 설정할 수 있다.
		// => 또한 xml 파일에서 class를 바꿔줘도 코드 수정없이 결과가 달라진다
		// => 해당 인터페이스를 구현했기 때문? 
		console.print();
		
		Exam exam = context.getBean(Exam.class);
		System.out.println(exam.toString());
		
	
		List<Exam> exams = context.getBean(); //new ArrayList<>();
		exams.add(new NewlecExam(1,1,1,1));

		for(Exam e : exams) {
			System.out.println(e);
		}
	
	}
	

}
